{
    "mode": "python",
    "xmlText": "<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"yolobit_basic_forever\" id=\"w5Bl*-!,Ihc8X2tI)wP*\" x=\"87\" y=\"37\"><statement name=\"FOREVER\"><block type=\"yolobit_led_set_xy\" id=\"gw#~?r?Y2GP#uLD;?Ap%\"><value name=\"X\"><shadow type=\"math_number\" id=\"C6~_x#VO-fPqXV*neEW_\"><fielad name=\"NUM\">1</field></shadow></value><value name=\"Y\"><shadow type=\"math_number\" id=\"J?giF9!V29^_GF|AW$4%\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLOR\"><shadow type=\"colour_picker\" id=\"LY9QU9_~D`8[HoX[S;4+\"><field name=\"COLOUR\">#ff0000</field></shadow></value><next><block type=\"yolobit_basic_sleep\" id=\"20tXFB0o3iKe4eb9kv^a\"><value name=\"duration\"><shadow type=\"math_number\" id=\"i(qJ1h$Q_e;kLDY_Efp)\"><field name=\"NUM\">1000</field></shadow></value><next><block type=\"yolobit_led_clear_xy\" id=\"1:1{|kXbw]QZ4FgSx0u$\"><value name=\"X\"><shadow type=\"math_number\" id=\"}#?qNy364oy|4tms+|-3\"><field name=\"NUM\">1</field></shadow></value><value name=\"Y\"><shadow type=\"math_number\" id=\"zCK}Utz)LnZgDhoomh`C\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"yolobit_basic_sleep\" id=\"C*]Sq7n=B-lKQxy#W~Ke\"><value name=\"duration\"><shadow type=\"math_number\" id=\"TA%$?0!Z-}Ki_{egZC7a\"><field name=\"NUM\">1000</field></shadow></value><next><block type=\"xbot_serial_write_string\" id=\"7dN}:f_Yp#H1Q1[tv?EO\"><value name=\"string\"><shadow type=\"text\" id=\"4QO|:2?W)x)M{Op2zsG=\"><field name=\"TEXT\">abcd</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>",
    "python": "from yolobit import *\nimport uselect\nimport time\nimport sys\nfrom event_manager import *\nimport uasyncio as asyncio\nimport dht\nfrom machine import Pin\nimport json\n\n#\n# Author: nguyen_tran\n#\n\nevent_manager.reset()\n\n##################################################################\nclass ICommunicationService:\n  #\n  # Generic interface for communication methods\n  #\n  \n  # Writes to the communication stream\n  def write(self, inp: str):\n    pass\n  \n  # Read from the communication stream\n  def read(self) -> str:\n    pass\n\n##################################################################\nclass SerialService(ICommunicationService):\n  #\n  # Through USB serial\n  #\n  _spoll = None\n  \n  def __init__(self):\n    self._spoll = uselect.poll()        # Set up an input polling object.\n    self._spoll.register(sys.stdin, uselect.POLLIN)    # Register polling object.\n    return\n    \n  def write(self, inp: str):\n    print(inp)\n    return\n  \n  def read(self) -> str:\n    inp = ''\n    \n    if self._spoll.poll(0):\n      inp = sys.stdin.read(1)\n      \n    while self._spoll.poll(0):\n      inp = inp + sys.stdin.read(1)\n      \n    return str(inp)\n    \n  def __del__(self):\n    self._spoll.unregister(sys.stdin)\n    return\n  \nserial_service: ICommunicationService = SerialService()\n\n##################################################################\n\nclass ISensorNode:\n  # Gets sensor data\n  def read():\n    pass\n  \nclass DHTNode(ISensorNode):\n  def __init__(self):\n    return\n  \n  def read():\n    dht11.measure()\n    # Returns temperature and humidity\n    temp = dht11.temperature()\n    humid = dht11.humidity()\n    return (temp, humid)\n    \ndht_node = DHTNode()\n\nclass DetectorNode(ISensorNode):\n  def __init__():\n    return\n  \n  def read():\n    # Check for motion\n    return False\n\ndetector_node = DetectorNode()\n\n##################################################################\n\nclass SensorDto:\n  temp: int\n  humidity: int\n  detected: bool\n  \n  def __init__(self, temp: int, humidity: int, detected: bool):\n    self.temp = temp\n    self.humidity = humidity\n    self.detected = detected\n\n##################################################################\n\nasync def send_data(data: SensorDto):\n  # Sends as JSON\n  js = json.dumps(data)\n  print(js)\n  return\n\nasync def execute_command(command: str):\n  print(\"Received: {0}\".format(task))\n  return\n\n##################################################################\n\nasync def read_commands(service: ICommunicationService):\n  while True:\n    task = service.read()\n    execute_command(task)\n    await asyncio.sleep(500)\n    continue\n  return\n\nasync def get_sensor_data(dht_node: ISensorNode, detector_node: ISensorNode):\n  while True:\n      temp, humid = dht_node.read()\n      detected = detector_node.read()\n      dto = SensorDto(temp, humid, detected)\n      task = asyncio.create_task(send_data(dto))\n      await asyncio.sleep(500)\n      continue\n  return\n  \n##################################################################\n\nasync def main():\n  # Create tasks\n  # One for reading the commands\n  command_reader = asyncio.create_task(read_commands(serial_service))\n  # One for reading the sensor and send it through serial\n  data_reader = asyncio.create_task(get_sensor_data(dht_node, detector_node))\n  return\n  \n##################################################################\n  \nasyncio.run(main())\n\n",
    "name": "iot_controller",
    "extensions": [],
    "device": "yolobit"
}